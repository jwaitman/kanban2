#!/bin/bash
#
# Kanban System Setup Script
# Version: 1.4 - Final
# Description: Fully automated setup for the Kanban system on a fresh Ubuntu 24.04 server.
# This script installs all dependencies, configures the database and web server,
# builds the frontend, and sets all necessary permissions, including cache directories.
#

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration ---
PROJECT_ROOT="/var/www/html/kanban"
APACHE_CONF_FILE="/etc/apache2/sites-available/kanban.conf"
DB_NAME="kanban_db"
DB_USER="kanban_user"
DB_PASS="Str0ngP@ssw0rd!" # Use a secure password in production
DOMAIN="kanban.local"
WEB_USER="www-data"
WEB_USER_HOME="/var/www" # Home directory for www-data

# --- Pre-flight Checks ---
echo "--- Running Pre-flight Checks ---"
if [ "$(id -u)" -ne 0 ]; then
  echo "ERROR: This script must be run as root. Please use 'sudo ./setup.sh'" >&2
  exit 1
fi
if [ ! -d "${PROJECT_ROOT}" ]; then
    echo "ERROR: Project directory not found at ${PROJECT_ROOT}" >&2
    exit 1
fi

# --- Main Execution ---
echo "--- Starting Kanban System Setup ---"

# 1. System Update & Dependency Installation
echo "STEP 1: Updating package lists and installing system dependencies..."
apt-get update
apt-get install -y apache2 mariadb-server php libapache2-mod-php php-mysql php-mbstring php-xml php-json php-curl nodejs npm composer git

# 2. Enable Apache Modules
echo "STEP 2: Enabling required Apache modules..."
a2enmod rewrite
a2enmod ssl
a2enmod headers

# 3. Database Setup
echo "STEP 3: Setting up MariaDB database and user..."
systemctl start mariadb
systemctl enable mariadb
mysql -u root <<MYSQL_SCRIPT
CREATE DATABASE IF NOT EXISTS ${DB_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER IF NOT EXISTS '${DB_USER}'@'localhost' IDENTIFIED BY '${DB_PASS}';
GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'localhost';
FLUSH PRIVILEGES;
MYSQL_SCRIPT
echo "Importing database schema and seed data..."
mysql -u "${DB_USER}" -p"${DB_PASS}" "${DB_NAME}" < "${PROJECT_ROOT}/db/schema.sql"
mysql -u "${DB_USER}" -p"${DB_PASS}" "${DB_NAME}" < "${PROJECT_ROOT}/db/seed.sql"

# 4. Configure Backend PHP
echo "STEP 4: Configuring backend database connection file..."
cat > "${PROJECT_ROOT}/config/database.php" <<EOL
<?php
// config/database.php - Generated by setup.sh
define('DB_HOST', 'localhost');
define('DB_NAME', '${DB_NAME}');
define('DB_USER', '${DB_USER}');
define('DB_PASS', '${DB_PASS}');
EOL

# 5. Set Project File Permissions
echo "STEP 5: Setting file ownership for the project..."
chown -R ${WEB_USER}:${WEB_USER} "${PROJECT_ROOT}"
chmod -R 755 "${PROJECT_ROOT}"
chmod -R 775 "${PROJECT_ROOT}/storage"

# 6. Create and Set Permissions for Cache Directories
echo "STEP 6: Creating cache directories for Composer and NPM..."
mkdir -p "${WEB_USER_HOME}/.cache/composer"
mkdir -p "${WEB_USER_HOME}/.npm"
chown -R ${WEB_USER}:${WEB_USER} "${WEB_USER_HOME}/.cache"
chown -R ${WEB_USER}:${WEB_USER} "${WEB_USER_HOME}/.npm"

# 7. Install Application Dependencies (as www-data)
echo "STEP 7: Installing Composer and NPM dependencies as the '${WEB_USER}' user..."
cd "${PROJECT_ROOT}"
sudo -u ${WEB_USER} composer install --no-dev --optimize-autoloader

cd "${PROJECT_ROOT}/frontend"
sudo -u ${WEB_USER} npm install
sudo -u ${WEB_USER} npm run build

# The vite.config.js builds assets directly into the /public directory,
# so no move operation is necessary. The incorrect move command has been removed.

# 8. Generate Self-Signed SSL Certificate
echo "STEP 8: Generating self-signed SSL certificate..."
mkdir -p /etc/ssl/private
chmod 700 /etc/ssl/private
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt -subj "/C=US/ST=CA/L=SanFrancisco/O=Kanban/OU=Dev/CN=${DOMAIN}"

# 9. Configure Apache Virtual Host
echo "STEP 9: Creating Apache virtual host configuration..."
cat > "${APACHE_CONF_FILE}" <<EOL
<VirtualHost *:80>
    ServerName ${DOMAIN}
    Redirect permanent / https://${DOMAIN}/
</VirtualHost>
<VirtualHost *:443>
    ServerName ${DOMAIN}
    DocumentRoot "${PROJECT_ROOT}/public"
    <Directory "${PROJECT_ROOT}/public">
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
        FallbackResource /index.html
    </Directory>
    Alias /api "${PROJECT_ROOT}/api"
    <Directory "${PROJECT_ROOT}/api">
        Options -Indexes +FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>
    ErrorLog \${APACHE_LOG_DIR}/kanban_error.log
    CustomLog \${APACHE_LOG_DIR}/kanban_access.log combined
    SSLEngine on
    SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt
    SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key
    Header always set Strict-Transport-Security "max-age=63072000"
    Header always set X-Frame-Options "DENY"
    Header always set X-Content-Type-Options "nosniff"
</VirtualHost>
EOL

# 10. Enable Site and Restart Apache
echo "STEP 10: Enabling site and restarting Apache..."
a2ensite kanban.conf
a2dissite 000-default.conf
apache2ctl configtest
systemctl restart apache2

# --- Finalization ---
echo ""
echo "--- Kanban System Setup Complete! ---"
echo "Access the application at: https://${DOMAIN}"
echo "IMPORTANT: Add the following to your local computer's 'hosts' file:"
echo "SERVER_IP_ADDRESS   ${DOMAIN}"
echo ""
echo "Default Logins:"
echo "  Admin:   admin@kanban.local / adminpass"
echo "  Manager: manager@kanban.local / managerpass"
echo "  User:    user@kanban.local / userpass"
echo ""
